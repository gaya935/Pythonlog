{
  
    
        "post0": {
            "title": "예제",
            "content": ". # 실패 import random cube=[] for i in range(10000): a=random.randint(1,6) if a=1: cube.append(cube) . File &#34;&lt;ipython-input-5-4f1841ee7dde&gt;&#34;, line 9 if a=1: ^ SyntaxError: invalid syntax . # 선생님 답 import random dice_cnt=[0,0,0,0,0,0] # 리스트 초기화 for i in range(10000): number=random.randint(1,6) if number==1: # 횟수 카운트 dice_cnt[0]+=1 # elif는 중첩반복 elif number==2: dice_cnt[1]+=1 elif number==3: dice_cnt[2]+=1 elif number==4: dice_cnt[3]+=1 elif number==5: dice_cnt[4]+=1 elif number==6: dice_cnt[5]+=1 print(dice_cnt) . [1693, 1684, 1612, 1696, 1710, 1605] . # 신박한 방법(장민준 님) import random dice = [1,2,3,4,5,6] conse = [] for i in range(10000) : conse.append(random.choice(dice)) for i in range(1, len(dice)+1) : print(f&#39;{i}은(는) {conse.count(i)}개&#39;) . 1은(는) 1615개 2은(는) 1627개 3은(는) 1647개 4은(는) 1724개 5은(는) 1702개 6은(는) 1685개 . score=[[96,84,80],[96,86,76],[76,95,83],[89,96,69],[90,76,91],[82,66,88],[83,86,79],[85,90,83]] kor=[] eng=[] math=[] for temp in score: kor.append(temp[0]) eng.append(temp[1]) math.append(temp[2]) print(kor) print(eng) print(math) kor_avg=round(sum(kor)/len(kor),1) eng_avg=round(sum(eng)/len(eng),1) math_avg=round(sum(math)/len(math),1) print(&#39;-&#39;*50) print(f&#39;국어평균: {kor_avg}점, 영어평균: {eng_avg}점, 수학평균: {math_avg}점&#39;) . [96, 96, 76, 89, 90, 82, 83, 85] [84, 86, 95, 96, 76, 66, 86, 90] [80, 76, 83, 69, 91, 88, 79, 83] -- 국어평균: 87.1점, 영어평균: 84.9점, 수학평균: 81.1점 . kor = [] eng = [] math = [] scores = [[96,84,80], [96,86,76], [76,95,83], [89,96,69], [90,76,91], [82,66,88], [83,86,79], [85,90,83]] for i in range(3): for j in range(8): if i == 0: kor.append(scores[j][i]) elif i == 1: eng.append(scores[j][i]) elif i == 2: math.append(scores[j][i]) print(f&#39;국어: {kor}&#39;) print(f&#39;영어: {eng}&#39;) print(f&#39;수어: {math}&#39;) print(f&#39;국어평균: {round(sum(kor)/len(kor),1)}, 영어평균: {round(sum(eng)/len(eng),1)}, 수학평균: {round(sum(math)/len(math),1)}&#39;) . 국어: [96, 96, 76, 89, 90, 82, 83, 85] 영어: [84, 86, 95, 96, 76, 66, 86, 90] 수어: [80, 76, 83, 69, 91, 88, 79, 83] 국어평균: 87.1, 영어평균: 84.9, 수학평균: 81.1 . &#53916;&#54540; . # tuple_name=() # 값을 바꿀 수 없다. # 프로그램을 실행하는 동안 값이 바뀌면 안되는 경우에 사용.(주민번호, 전화번호 등) # 선언과 동시에 메모리가 정해짐. 빠르고 정확하게 사용 가능. 대단위의 정보 사용 t1=(1,2,3) t2=(1,) print(t1,t2) . (1, 2, 3) (1,) . t1 = (1,5,3,4,2) t2 = (6,7,8,9,8) print(t1[1]) # 인덱싱 print(t1[2:4]) # 슬라이싱 print(t1+t2) # 더하기 print(t1*3) # 곱하기 print(len(t1)) # 길이 구하기 print(t2.index(9)) # 요소의 위치 찾기 print(t2.count(8)) # 요소의 갯수 sort_t1 = sorted(t1) # 정렬된 새로운 리스트 반환 print(sort_t1) . 5 (3, 4) (1, 5, 3, 4, 2, 6, 7, 8, 9, 8) (1, 5, 3, 4, 2, 1, 5, 3, 4, 2, 1, 5, 3, 4, 2) 5 3 2 [1, 2, 3, 4, 5] . values=[56,12,33,8,3,2,98] total=0 for i in range(7): total+=values[i] print(total) values=[56,12,33,8,3,2,98] total=0 for i in values: total+=i print(total) values=[56,12,33,8,3,2,98] total=sum(values) print(total) . 212 212 212 . &#46357;&#49492;&#45320;&#47532; . # 키:값이 쌍을 이루어 하나의 요소로 저장된다. # 순서가 없다. # 인덱스가 아닌 키(key)로 제어한다. 따라서 키(key)는 고유해야하며 수정 불가능하다. menu={&#39;아메리카노&#39;:2000,&#39;카페라떼&#39;:3000,&#39;카푸치노&#39;:3500} dict_person={&#39;name&#39;:&#39;홍길동&#39;,&#39;phone&#39;:&#39;01012345678&#39;,&#39;age&#39;:35,&#39;hobbies&#39;:[&#39;운동&#39;,&#39;독서&#39;]} dict_person dict_phone={&#39;홍길동&#39;:&#39;01012345678&#39;,&#39;공유&#39;:&#39;01056781234&#39;,&#39;현빈&#39;:&#39;01098765432&#39;} dict_phone . {&#39;공유&#39;: &#39;01012345678&#39;, &#39;현빈&#39;: &#39;01012345678&#39;, &#39;홍길동&#39;: &#39;01012345678&#39;} . # 키는 중복되어도 오류는 안나지만, 여러개 중 하나의 키만 참조되므로 프로그램이 정상 작동하지 않을 수 있음. dict_score={&#39;홍길동&#39;:80,&#39;공유&#39;:90,&#39;현빈&#39;:100} # 들여쓰기로 여러줄에 기술할 수 있다. dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } dict_score . {&#39;공유&#39;: 90, &#39;현빈&#39;: 100, &#39;홍길동&#39;: 80} . dict_score={} dict_score[&#39;홍길동&#39;]=90 dict_score[&#39;공유&#39;]=90 dict_score[&#39;현빈&#39;]=100 dict_score . {&#39;공유&#39;: 90, &#39;현빈&#39;: 100, &#39;홍길동&#39;: 90} . dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } del dict_score[&#39;홍길동&#39;] dict_score . {&#39;공유&#39;: 90, &#39;현빈&#39;: 100} . dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } sco=dict_score.pop(&#39;홍길동&#39;) print(sco) # 요소 추출 print(dict_score) # 추출된 요소 삭제 . 80 {&#39;공유&#39;: 90, &#39;현빈&#39;: 100} . dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } dict_score.clear() dict_score . {} . dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } dict_score[&#39;공유&#39;]=95 # 키 값이 있으면 수정, 키 값이 없으면 추가 dict_score . {&#39;공유&#39;: 95, &#39;현빈&#39;: 100, &#39;홍길동&#39;: 80} . dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } print(dict_score[&#39;홍길동&#39;]) # 요소 추출2 dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } print(dict_score.get(&#39;홍길동&#39;)) . 80 80 . dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } print(dict_score.get(&#39;송중기&#39;)) # 존재하지 않는 키로 추출하면 None리턴 print(dict_score.get(&#39;송중기&#39;,&#39;없음&#39;)) # 존재하지 않는 키로 추출하면 미리 정해둔 값 리턴 . None 없음 . dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } print(&#39;송중기&#39; in dict_score) # dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } &#39;홍길동&#39; in dict_score . False . True . dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } print(dict_score.keys()) # 모든 키 반환 print(list(dict_score.keys())) # 리스트 형식으로 모든 키 반환 . dict_keys([&#39;홍길동&#39;, &#39;공유&#39;, &#39;현빈&#39;]) [&#39;홍길동&#39;, &#39;공유&#39;, &#39;현빈&#39;] . dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } print(dict_score.values()) # 모든 값 반환 print(list(dict_score.values())) # 리스트 형식으로 모든 값 반환 . dict_values([80, 90, 100]) [80, 90, 100] . dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } print(dict_score.items()) # 모든 키-값 반환(튜플로 묶여서) print(list(dict_score.items())) # 리스트 형식으로 모든 키-값 반환(튜플로 묶여서) . dict_items([(&#39;홍길동&#39;, 80), (&#39;공유&#39;, 90), (&#39;현빈&#39;, 100)]) [(&#39;홍길동&#39;, 80), (&#39;공유&#39;, 90), (&#39;현빈&#39;, 100)] . dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } for key in dict_score.keys(): print(key,dict_score[key]) print(&#39;-&#39;*60) # 데이터 모두 출력하기 2 dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } for key,value in dict_score.items(): print(key,value) . 홍길동 80 공유 90 현빈 100 홍길동 80 공유 90 현빈 100 . # 데이터 모두 출력하기 1 dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } # 딕셔너리의 키를 정렬하여 리스트로 받음 sort_keys=sorted(dict_score.keys()) print(sort_keys) # 정렬된 키 리스트 순서로 반복 for key in sort_keys: print(key,dict_score[key]) . [&#39;공유&#39;, &#39;현빈&#39;, &#39;홍길동&#39;] 공유 90 현빈 100 홍길동 80 . dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } # 딕셔너리의 키를 정렬하여 튜플(키,값)으로 받음 sort_items=sorted(dict_score.items()) print(sort_items) # 정렬된 키 리스트 순서로 반복 for key,value in sort_items: print(key,value) . [(&#39;공유&#39;, 90), (&#39;현빈&#39;, 100), (&#39;홍길동&#39;, 80)] 공유 90 현빈 100 홍길동 80 . dict_score={ &#39;홍길동&#39;:80, &#39;공유&#39;:90, &#39;현빈&#39;:100 } len(dict_score) . 3 . mile={&#39;Kim&#39;:12000,&#39;Lee&#39;:11000,&#39;Han&#39;:3000,&#39;Hong&#39;:5000,&#39;Nam&#39;:18000} for key in mile.keys(): print(key,mile[key]) print(&#39;-&#39;*60) mile[&#39;Han&#39;]=5000 mile[&#39;Jang&#39;]=7000 print(mile) print(&#39;-&#39;*60) print(max(list(mile.values()))) . Kim 12000 Lee 11000 Han 3000 Hong 5000 Nam 18000 {&#39;Kim&#39;: 12000, &#39;Lee&#39;: 11000, &#39;Han&#39;: 5000, &#39;Hong&#39;: 5000, &#39;Nam&#39;: 18000, &#39;Jang&#39;: 7000} 18000 . &#50696;&#51228; . dic = {&#39;kim&#39;:12000, &#39;lee&#39;:11000, &#39;han&#39;:3000, &#39;hong&#39;:5000, &#39;hwang&#39;:18000} dic[&#39;han&#39;] = 5000 dic[&#39;jang&#39;] = 7000 print(dic) value_max = max(dic.values()) for key, value in dic.items(): if value == value_max: print(key, value) . {&#39;kim&#39;: 12000, &#39;lee&#39;: 11000, &#39;han&#39;: 5000, &#39;hong&#39;: 5000, &#39;hwang&#39;: 18000, &#39;jang&#39;: 7000} hwang 18000 . voca={} while True: eng = input(&#39;eng: &#39;) if eng==&#39;&#39;: break kor = input(&#39;kor: &#39;) voca[eng]=kor print(voca) score=0 for s in voca.keys(): kor =input(s+&#39;:&#39;) if kor == voca[s]: score+=1 print(f&#39;맞은 개수/전체 단어수: {score} / {len(voca.values())}&#39;) . eng: 11 kor: 22 eng: 33 kor: 44 eng: {&#39;11&#39;: &#39;22&#39;, &#39;33&#39;: &#39;44&#39;} 11:22 33:33 맞은 개수/전체 단어수: 1 / 2 .",
            "url": "https://gaya935.github.io/Pythonlogee/2021/06/06/_27-1%ED%8C%80_%EB%82%A8%EA%B0%80%EC%97%B0.html",
            "relUrl": "/2021/06/06/_27-1%ED%8C%80_%EB%82%A8%EA%B0%80%EC%97%B0.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "기초 문법",
            "content": ". print(&#39;hello, python1!!&#39;) print(&#39;hello, python2!!&#39;) . File &#34;&lt;ipython-input-1-a6d7dec443a7&gt;&#34;, line 2 print(&#39;hello, python2!!&#39;) ^ IndentationError: unexpected indent . if a&lt;0: print(test1) . File &#34;&lt;ipython-input-2-f05199a99426&gt;&#34;, line 2 print(test1) ^ IndentationError: expected an indented block . n=1 print(n) print(type(n)) #데이터형. 변수의 형태 확인방법. print(id(n)) #데이터 주소. 변수의 주소 확인방법. . 1 &lt;class &#39;int&#39;&gt; 94895955180032 . n=1.0 print(n) print(type(n)) print(id(n)) . 1.0 &lt;class &#39;float&#39;&gt; 140435992494320 . n=&quot;hi&quot; print(n) print(type(n)) print(id(n)) . hi &lt;class &#39;str&#39;&gt; 140436625859568 . n=True print(n) print(type(n)) print(id(n)) . True &lt;class &#39;bool&#39;&gt; 94895954505984 . n=[1,2,3] print(n) print(type(n)) print(id(n)) . [1, 2, 3] &lt;class &#39;list&#39;&gt; 140435925698192 . n=(1,2,3) print(n) print(type(n)) print(id(n)) . (1, 2, 3) &lt;class &#39;tuple&#39;&gt; 140435925570336 . n={&#39;name&#39;:&#39;john&#39;,&#39;age&#39;:15} print(n) print(type(n)) print(id(n)) . {&#39;name&#39;: &#39;john&#39;, &#39;age&#39;: 15} &lt;class &#39;dict&#39;&gt; 140435925182896 . n={&#39;apple&#39;,&#39;orange&#39;,&#39;orange&#39;,&#39;banana&#39;} print(n) print(type(n)) print(id(n)) . {&#39;banana&#39;, &#39;orange&#39;, &#39;apple&#39;} &lt;class &#39;set&#39;&gt; 140435926018000 . a=&quot;시간은 &#39;금&#39;이다&quot; b=&#39;시간은 &quot;금&quot;이다&#39; c=&#39;시간은 &#39;금&#39;이다&#39; print(a) print(b) print(c) . File &#34;&lt;ipython-input-2-8cb66446d4dd&gt;&#34;, line 4 c=&#39;시간은 &#39;금&#39;이다&#39; ^ SyntaxError: invalid syntax . a=&#39;&#39;&#39;자세히 보아야 예쁘다. 오래 보아야 사랑스럽다. 너도 그렇다.&#39;&#39;&#39; print(a) . 자세히 보아야 예쁘다. 오래 보아야 사랑스럽다. 너도 그렇다. . a=&quot;&#39;낮말&#39;은 새가 듣고 &#39;밤말&#39;은 쥐가 듣는다&quot; b=&#39;&quot;시간은 금&quot;이라는 말이 있다&#39; print(a) print(b) . &#39;낮말&#39;은 새가 듣고 &#39;밤말&#39;은 쥐가 듣는다 &#34;시간은 금&#34;이라는 말이 있다 . a=1&gt;2 print(a) a=1&lt;2 print(a) . False True . &#44592;&#48376; &#50672;&#49328; . a,b=10,20 print(a+b) . 30 . a,b=&quot;10&quot;,&quot;20&quot; print(a+b) . 1020 . a,b=&quot;10&quot;,20 print(a+b) . TypeError Traceback (most recent call last) &lt;ipython-input-22-420e106498ae&gt; in &lt;module&gt;() 1 a,b=&#34;10&#34;,20 -&gt; 2 print(a+b) TypeError: can only concatenate str (not &#34;int&#34;) to str . a,b=10.0,20 print(a+b) . 30.0 . a,b=10,&quot;20&quot; print(a+int(b)) a,b=10,20 print(str(a)+str(b)) a,b=10,20 print(float(a)+float(b)) . 30 1020 30.0 . &#48320;&#49688; &#51077;&#47141;&#48155;&#50500; &#52636;&#47141;&#54616;&#44592; . name=input(&#39;이름을 입력하세요: &#39;) print(name,&#39;님 안녕하세요?&#39;) . 이름을 입력하세요: 300 300 님 안녕하세요? . print(5) print(0.5) print(&#39;Hi&#39;) print(&#39;10&#39;) print(1+2) print(2&gt;3) print(2&lt;3) a=1 print(a) print(a+1) # 출력 구분값 쉼표 사용 print(&#39;Hello&#39;,&#39;World&#39;) print(&#39;1 더하기 2는&#39;,1+2) age=10 print(&#39;나는&#39;,age,&#39;살입니다.&#39;) . 5 0.5 Hi 10 3 False True 1 2 Hello World 1 더하기 2는 3 나는 10 살입니다. . name=input(&#39;이름을 입력하세요: &#39;) print(f&#39;{name}님 안녕하세요?&#39;) . 이름을 입력하세요: 파이썬 파이썬님 안녕하세요? . print(&#39;두 수를 입력받아 더하는 프로그램입니다.&#39;) num1=input(&#39;첫번째 숫자를 입력하세요: &#39;) num2=input(&#39;두번째 숫자를 입력하세요: &#39;) print(f&#39;{num1} + {num2} = {int(num1)+int(num2)}&#39;) . 두 수를 입력받아 더하는 프로그램입니다. 첫번째 숫자를 입력하세요: 15 두번째 숫자를 입력하세요: 25 15 + 25 = 40 . &#49328;&#49696;&#50672;&#49328; . # 인수가 0이면 오류발생 x=100 y=5 print(x+y) print(x-y) print(x*y) print(x/y) print(x//y) # 몫의 정수 부분만 print(x%y) # 나누기의 나머지 print(-x) print(+x) print(x**y) # 제곱 . 105 95 500 20.0 20 0 -100 100 10000000000 . &#50696;&#51228; . f=int(input(&#39;화씨온도: &#39;)) print(&#39;섭씨온도: &#39;,(f-32)*5/9) . 화씨온도: 30 섭씨온도: -1.1111111111111112 . a=float(input(&#39;밑변:&#39;)) b=float(input(&#39;높이:&#39;)) print(&#39;삼각형의 넓이:&#39;,(a*b)/2) . 밑변:6.5 높이:5 삼각형의 넓이: 16.25 . print(f&#39;삼각형의 넓이: {(float(input(&quot;밑변: &quot;))*float(input(&quot;높이: &quot;)))/2}&#39;) . 밑변: 5 높이: 6 삼각형의 넓이: 15.0 . r=float(input(&#39;원의 반지름: &#39;)) p=3.14 print(f&#39;원의 둘레:{2*p*r} 원의 넓이:{p*(r**2)}&#39;) . 원의 반지름: 5 원의 둘레:31.400000000000002 원의 넓이:78.5 . &#48373;&#54633;&#54624;&#45817;&#50672;&#49328;&#51088; . a=8 a+=3 # (a=a+3) a-=3 # (a=a-3) a*=3 # (a=a*3) a/=3 # (a=a/3) a**=3 # (a=a**3) a//=3 # (a=a//3) a%=3 # (a=a%3) . x=10 x +=20 print(x) . 30 . x=3 y=5 x *= x + y x = x*(x+y) print(x) . 24 . &#47928;&#51088;&#50676; . s=&#39;ha&#39; print(s*5) . hahahahaha . name=input(&#39;이름을 입력하세요: &#39;) greet=name+&#39;님, 안녕하세요&#39; print(greet) . 이름을 입력하세요: skark93 skark93님, 안녕하세요 . english=80 result=&#39;영어점수: &#39; + str(english) + &#39;점&#39; print(result) . 영어점수: 80점 . &#50696;&#51228;2 . sta=input(&#39;경기장: &#39;) winner=input(&#39;이긴팀: &#39;) loser=input(&#39;진팀: &#39;) vip=input(&#39;vip: &#39;) score=input(&#39;스코어: &#39;) print(&#39;-&#39;*60) print(f&#39;&#39;&#39;오늘 {sta}에서 경기가 열렸습니다. {winner}와(과) {loser}은(는) 치열한 공방전을 펼쳤습니다. {vip}이(가) 맹활약을 펼쳤습니다. 결국 {winner}이(가) {loser}을(를) {score}로 이겼습니다.&#39;&#39;&#39;) . 경기장: 올림픽경기장 이긴팀: 대한민국 진팀: 일본 vip: 손흥민 스코어: 10:0 오늘 올림픽경기장에서 경기가 열렸습니다. 대한민국와(과) 일본은(는) 치열한 공방전을 펼쳤습니다. 손흥민이(가) 맹활약을 펼쳤습니다. 결국 대한민국이(가) 일본을(를) 10:0로 이겼습니다. . loca=input(&#39;지역을 입력해주세요: &#39;) sale=input(&#39;매물종류를 선택해주세요: &#39;) square=input(&#39;평을 입력해주세요: &#39;) volume=input(&#39;방 개수를 입력해주세요: &#39;) price=input(&#39;가격을 입력해주세요: &#39;) print(&#39;-&#39;*60) print(f&#39;&#39;&#39;{loca}에 위치한 아주 좋은 {sale}이(가) 매물로 나왔습니다. 이 {sale}는 {square}평으로 {volume}개의 방을 가지고 있습니다. 가격은 {price}만원 입니다.&#39;&#39;&#39;) . 지역: 노원구 매물종류: 아파트 평: 18 방 개수: 2 가격: 1억 5천 노원구에 위치한 아주 좋은 아파트이(가) 매물로 나왔습니다. 이 아파트는 18평으로 2개의 방을 가지고 있습니다. 가격은 1억 5천만원 입니다. . tn = input(&#39;팀 이름: &#39;) con = input(&#39;팀 컨셉: &#39;) print(f&quot;&quot;&quot; 저희 팀은 &#39;{tn}&#39;팀 입니다. 저희팀은 팀원 각자에게 {con} 컨셉으로 이름을 붙였습니다. &quot;&quot;&quot;) . 팀 이름: 넘버원 팀 컨셉: 외국계 회사 취직하기 저희 팀은 &#39;넘버원&#39;팀 입니다. 저희팀은 팀원 각자에게 외국계 회사 취직하기 컨셉으로 이름을 붙였습니다. . name=input(&#39;이름을 입력하세요:&#39;) kor=float(input(&#39;국어성적을 입력하세요:&#39;)) eng=float(input(&#39;영어성적을 입력하세요:&#39;)) math=float(input(&#39;수학성적을 입력하세요:&#39;)) avg=(kor+eng+math)/3 print(&#39;-&#39;*60) print(f&#39;{name}님의 평균성적은 {round((avg),2)}점 입니다&#39;) . 이름을 입력하세요:남가연 국어성적을 입력하세요:90 영어성적을 입력하세요:95 수학성적을 입력하세요:94 남가연님의 평균성적은 93.0점 입니다 . ame_price=2000 cafe_price=3000 cafu_price=3500 ame=int(input(&#39;아메리카노 판매 갯수:&#39;)) cafe=int(input(&#39;카페라떼 판매 갯수:&#39;)) cafu=int(input(&#39;카푸치노 판매 갯수:&#39;)) total_income=((ame*ame_price)+(cafe*cafe_price)+(cafu*cafu_price)) print(f&#39;총 매출은 {total_income}원 입니다&#39;) . 아메리카노 판매 갯수:10 카페라떼 판매 갯수:20 카푸치노 판매 갯수:30 총 매출은 185000원 입니다 . ame = int(input(&#39;아메리카노 판매 갯수:&#39;)) cafe = int(input(&#39;카페라떼 판매 갯수:&#39;)) cafu = int(input(&#39;카푸치노 판매 갯수:&#39;)) ame *= 2000 cafe *= 3000 cafu *= 3500 print(f&#39;총 매출은 {(ame+cafe+cafu)}입니다&#39;) . 아메리카노 판매 갯수:15 카페라떼 판매 갯수:12 카푸치노 판매 갯수:3 총 매출은 76500입니다 . &#47928;&#51088;&#50676; . print( &#39;셀 병합 n t &#39;shift key &#39;를 누른후 n t t병합을 원하는 셀들을 다중선택 후 shift+M&#39;) . 셀 병합 &#39;shift key&#39;를 누른후 병합을 원하는 셀들을 다중선택 후 shift+M . # 주민번호, 우편번호 등 값이 0으로 시작되는 정수 # 파이썬에서는 정수가 0으로 시작하면 정수값 입력오류로 문법 오류 처리 print(&#39;06002&#39;) # 주민번호 예 print(930101-2345466) print(&#39;030101-2345466&#39;) . 06002 -1415365 030101-2345466 . # split: 문자열을 원하는 글자로 나눈다. print(&#39;-&#39;.join(&#39;Hello World&#39;)) print(&#39;Welcome to python&#39;.split(&#39; &#39;)) . H-e-l-l-o- -W-o-r-l-d [&#39;Welcome&#39;, &#39;to&#39;, &#39;python&#39;] . a = 8 == 12 print(a,type(a)) b = &#39;apple&#39; == &#39;APPLE&#39; print(b,type(b)) c = 8 != 12 print(c,type(c)) . False &lt;class &#39;bool&#39;&gt; False &lt;class &#39;bool&#39;&gt; True &lt;class &#39;bool&#39;&gt; . &#54016; &#50696;&#51228; . print(&#39;&#39;&#39;연산하고자 하는 C. 화씨로 섭씨 구하기. F. 섭씨로 화씨 구하기. &#39;&#39;&#39;) order = input() if order == &#39;C&#39; : print(&quot;화씨에서 섭씨로 변환하는 수식은, &#39;화씨 = (섭씨-32) * 5/9&#39;이다.&quot;) print(divider) Faren = input(&#39;화씨온도: &#39;) print(f&#39;섭씨온도: {(float(Faren)-float(32))*float(5)/float(9)}&#39;) elif order == F : print(&quot;섭씨에서 화씨로 변환하는 수식은, &#39;섭씨 = (화씨*9/5) +32&#39;이다.&quot;) print(divider) C = input(&#39;섭씨온도: &#39;) print(&#39;섭씨온도: &#39;, (float(C)*9/5) + 32) . 연산하고자 하는 C. 화씨로 섭씨 구하기. F. 섭씨로 화씨 구하기. C 화씨에서 섭씨로 변환하는 수식은, &#39;화씨 = (섭씨-32) * 5/9&#39;이다. . NameError Traceback (most recent call last) &lt;ipython-input-62-47e32f582e96&gt; in &lt;module&gt;() 7 if order == &#39;C&#39; : 8 print(&#34;화씨에서 섭씨로 변환하는 수식은, &#39;화씨 = (섭씨-32) * 5/9&#39;이다.&#34;) -&gt; 9 print(divider) 10 Faren = input(&#39;화씨온도: &#39;) 11 print(f&#39;섭씨온도: {(float(Faren)-float(32))*float(5)/float(9)}&#39;) NameError: name &#39;divider&#39; is not defined . divider = &#39;-&#39; * 50 print(&#39;&#39;&#39;연산하고자 하는 C. 화씨로 섭씨 구하기. F. 섭씨로 화씨 구하기. &#39;&#39;&#39;) order = input() if order == &#39;C&#39; : print(&quot;화씨에서 섭씨로 변환하는 수식은, &#39;화씨 = (섭씨-32) * 5/9&#39;이다.&quot;) print(divider) Faren = input(&#39;화씨온도: &#39;) print(f&#39;섭씨온도: {(float(Faren)-float(32))*float(5)/float(9)}&#39;) elif order == &#39;F&#39; : print(&quot;섭씨에서 화씨로 변환하는 수식은, &#39;섭씨 = (화씨*9/5) +32&#39;이다.&quot;) print(divider) C = input(&#39;섭씨온도: &#39;) print(&#39;화씨온도: &#39;, (float(C)*9/5) + 32) . 연산하고자 하는 C. 화씨로 섭씨 구하기. F. 섭씨로 화씨 구하기. C 화씨에서 섭씨로 변환하는 수식은, &#39;화씨 = (섭씨-32) * 5/9&#39;이다. -- 화씨온도: 20 섭씨온도: -6.666666666666667 .",
            "url": "https://gaya935.github.io/Pythonlogee/2021/06/06/_1%ED%8C%80_%EB%82%A8%EA%B0%80%EC%97%B0.html",
            "relUrl": "/2021/06/06/_1%ED%8C%80_%EB%82%A8%EA%B0%80%EC%97%B0.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://gaya935.github.io/Pythonlogee/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://gaya935.github.io/Pythonlogee/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://gaya935.github.io/Pythonlogee/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gaya935.github.io/Pythonlogee/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}